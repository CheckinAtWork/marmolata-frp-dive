eyJhbGciOiJIUzI1NiJ9.aW1hZ2U6ICZpbWFnZSBtYXJtb2xhdGEtcmVnaXN0cnkubW8uc2FwLmNvcnAvbWFybW9sYXRhL2J1aWxkLnNjYWxhXzIuMTEub3Blbmpkazg6bGF0ZXN0CgpwaXBlbGluZToKICBjbG9uZToKICAgIGltYWdlOiBwbHVnaW5zL2dpdAogICAgc2tpcF92ZXJpZnk6IHRydWUKICAgIHRhZ3M6IHRydWUKICBjYWNoZS1yZXN0b3JlOgogICAgaW1hZ2U6IHBsdWdpbnMvc2Z0cC1jYWNoZQogICAgcmVzdG9yZTogdHJ1ZQogICAgd2hlbjoKICAgICAgZXZlbnQ6IFtwdXNoLCBwdWxsX3JlcXVlc3QsIHRhZ10KICBidWlsZDoKICAgIGltYWdlOiAqaW1hZ2UKICAgIGVudmlyb25tZW50OgogICAgICAtIElWWTI9Lml2eTIKICAgIGNvbW1hbmRzOgogICAgICAtIHNidCAtRHNidC5pdnkuaG9tZT0kSVZZMiBzY2FsYXN0eWxlIGNvbXBpbGUgZG9jCiAgICAgIC0gc2J0IC1Ec2J0Lml2eS5ob21lPSRJVlkyIGNvdmVyYWdlIHNjYWxhcnhKVk0vdGVzdCBzY2FsYXJ4SlZNL2NvdmVyYWdlUmVwb3J0CiAgICAgIC0gc2J0IC1Ec2J0Lml2eS5ob21lPSRJVlkyIGNvdmVyYWdlIHNlbGZyeEpWTS90ZXN0IHNlbGZyeEpWTS9jb3ZlcmFnZVJlcG9ydAogICAgICAtIHNidCAtRHNidC5pdnkuaG9tZT0kSVZZMiBtZXRhcnhKVk0vdGVzdDpjb21waWxlCiAgICAgIC0gc2J0IC1Ec2J0Lml2eS5ob21lPSRJVlkyIG1ldGFyeEpTL3Rlc3Q6Y29tcGlsZQogICAgICAtIHNidCAtRHNidC5pdnkuaG9tZT0kSVZZMiBjb3ZlcmFnZSBtZXRhcnhKVk0vdGVzdCBtZXRhcnhKVk0vY292ZXJhZ2VSZXBvcnQgfHwgdHJ1ZQogICAgICAtIHNidCAtRHNidC5pdnkuaG9tZT0kSVZZMiBjb3ZlcmFnZVJlcG9ydAogICAgICAtIHNidCAtRHNidC5pdnkuaG9tZT0kSVZZMiBjb3ZlcmFnZUFnZ3JlZ2F0ZQogICAgICAtIHNidCAtRHNidC5pdnkuaG9tZT0kSVZZMiBzY2FsYXJ4SlMvdGVzdCBzZWxmcnhKUy90ZXN0CiAgY2xvYzoKICAgIGltYWdlOiBtYXJtb2xhdGEtcmVnaXN0cnkubW8uc2FwLmNvcnAvbWFybW9sYXRhL2Ryb25lLXBsdWdpbi5jbG9jCiAgdGVzdENvdmVyYWdlOgogICAgaW1hZ2U6IG1hcm1vbGF0YS1yZWdpc3RyeS5tby5zYXAuY29ycC9tYXJtb2xhdGEvZHJvbmUtcGx1Z2luLnByLWNvdmVyYWdlOmxhdGVzdAogICAgZGlyZWN0b3JpZXM6IFtjb3JlL2p2bSwgY29yZS9qcywgc3FsL2p2bSwgc3FsL2pzXQogIHdhcm5pbmdzdGF0dXM6CiAgICBpbWFnZTogbWFybW9sYXRhLXJlZ2lzdHJ5Lm1vLnNhcC5jb3JwL21hcm1vbGF0YS9kcm9uZS1wbHVnaW4ud2FybmluZ3M6bGF0ZXN0CiAgdGVzdHJlcG9ydDoKICAgIGltYWdlOiBtYXJtb2xhdGEtcmVnaXN0cnkubW8uc2FwLmNvcnAvbWFybW9sYXRhL2Ryb25lLXBsdWdpbi50ZXN0cmVwb3J0OmxhdGVzdAogIHB1Ymxpc2hfYXJ0aWZhY3RfUFI6CiAgICBpbWFnZTogKmltYWdlCiAgICB3aGVuOgogICAgICBldmVudDogcHVsbF9yZXF1ZXN0CiAgICBjb21tYW5kczoKICAgICAgLSBzYnQgLURzYnQuaXZ5LmhvbWU9Lml2eTIgcHVibGlzaAogIHB1Ymxpc2hfYXJ0aWZhY3Q6CiAgICBpbWFnZTogKmltYWdlCiAgICB3aGVuOgogICAgICBldmVudDogW3B1c2gsIHRhZ10KICAgICAgYnJhbmNoOiBbZGV2LCBtYXN0ZXIsIHJlZnMvdGFncy8qXQogICAgY29tbWFuZHM6CiAgICAgIC0gZWNobyAtZSAicmVhbG09U29uYXR5cGUgTmV4dXMgUmVwb3NpdG9yeSBNYW5hZ2VyXG5ob3N0PSRORVhVU19NSUxFU1RPTkVfUkVQT1xudXNlcj0kTkVYVVNfTUlMRVNUT05FX1VTRVJcbnBhc3N3b3JkPSRORVhVU19NSUxFU1RPTkVfUEFTU1dPUkQiID4gLmNyZWRlbnRpYWxzCiAgICAgIC0gc2J0IC1Ec2J0Lml2eS5ob21lPS5pdnkyIFwKICAgICAgICAnc2V0IGNyZWRlbnRpYWxzIGluIFRoaXNCdWlsZCArPSBDcmVkZW50aWFscyhQYXRoKCIuIikgLyAiLmNyZWRlbnRpYWxzIiknIFwKICAgICAgICBwdWJsaXNoCiAgcHVibGlzaF9kb2N1bWVudGF0aW9uOgogICAgaW1hZ2U6IG1hcm1vbGF0YS1yZWdpc3RyeS5tby5zYXAuY29ycC9tYXJtb2xhdGEvZHJvbmUtcGx1Z2luLnB1Ymxpc2g6bGF0ZXN0CiAgICB3aGVuOgogICAgICBldmVudDogW3RhZywgcHVzaF0KICAgICAgYnJhbmNoOiBbZGV2LCBtYXN0ZXIsIHJlZnMvdGFncy8qXQogICAgY29tbWFuZHM6CiAgICAgIC0gL3B1Ymxpc2gtZG9jdW1lbnRhdGlvbi5zaAogIGNhY2hlLXJlYnVpbGQ6CiAgICBpbWFnZTogcGx1Z2lucy9zZnRwLWNhY2hlCiAgICByZWJ1aWxkOiB0cnVlCiAgICB3aGVuOgogICAgICBldmVudDogW3B1c2gsIHB1bGxfcmVxdWVzdCwgdGFnXQogICAgICBzdGF0dXM6IFtzdWNjZXNzLCBmYWlsdXJlXQogIHNsYWNrOgogICAgaW1hZ2U6IHBsdWdpbnMvc2xhY2sKICAgIHdoZW46CiAgICAgIGNoYW5nZTogdHJ1ZQogICAgICBldmVudDogW3B1c2gsIHB1bGxfcmVxdWVzdCwgdGFnXQogICAgICBzdGF0dXM6IFtzdWNjZXNzLCBmYWlsdXJlXQo.fFJyi15gGT1MICqb-Ehuk2FMFLiK8zQuR44W7tfuGYA