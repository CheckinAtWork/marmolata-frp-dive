eyJhbGciOiJIUzI1NiJ9.aW1hZ2U6ICZpbWFnZSBtYXJtb2xhdGEvc2NhbGEtYnVpbGQKCnBpcGVsaW5lOgogIGNsb25lOgogICAgaW1hZ2U6IHBsdWdpbnMvZ2l0CiAgICBza2lwX3ZlcmlmeTogdHJ1ZQogICAgdGFnczogdHJ1ZQogIGNhY2hlLXJlc3RvcmU6CiAgICBpbWFnZTogcGx1Z2lucy9zZnRwLWNhY2hlCiAgICByZXN0b3JlOiB0cnVlCiAgYnVpbGQ6CiAgICBpbWFnZTogKmltYWdlCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBJVlkyPS5pdnkyCiAgICBjb21tYW5kczoKICAgICAgLSBzYnQgLURzYnQuaXZ5LmhvbWU9JElWWTIgc2NhbGFzdHlsZSBjb21waWxlIGRvYwogICAgICAtIHNidCAtRHNidC5pdnkuaG9tZT0kSVZZMiBjb3ZlcmFnZSBzY2FsYXJ4SlZNL3Rlc3Qgc2NhbGFyeEpWTS9jb3ZlcmFnZVJlcG9ydAogICAgICAtIHNidCAtRHNidC5pdnkuaG9tZT0kSVZZMiBjb3ZlcmFnZSBzZWxmcnhKVk0vdGVzdCBzZWxmcnhKVk0vY292ZXJhZ2VSZXBvcnQKICAgICAgLSBzYnQgLURzYnQuaXZ5LmhvbWU9JElWWTIgbWV0YXJ4SlZNL3Rlc3Q6Y29tcGlsZQogICAgICAtIHNidCAtRHNidC5pdnkuaG9tZT0kSVZZMiBtZXRhcnhKUy90ZXN0OmNvbXBpbGUKICAgICAgLSBzYnQgLURzYnQuaXZ5LmhvbWU9JElWWTIgY292ZXJhZ2UgbWV0YXJ4SlZNL3Rlc3QgbWV0YXJ4SlZNL2NvdmVyYWdlUmVwb3J0IHx8IHRydWUKICAgICAgLSBzYnQgLURzYnQuaXZ5LmhvbWU9JElWWTIgY292ZXJhZ2VSZXBvcnQKICAgICAgLSBzYnQgLURzYnQuaXZ5LmhvbWU9JElWWTIgY292ZXJhZ2VBZ2dyZWdhdGUKICAgICAgLSBzYnQgLURzYnQuaXZ5LmhvbWU9JElWWTIgc2NhbGFyeEpTL3Rlc3Qgc2VsZnJ4SlMvdGVzdAogIGNsb2M6CiAgICBpbWFnZTogbWFybW9sYXRhL2Ryb25lLXBsdWdpbi1jbG9jCiAgIyBwdWJsaXNoX2NvdmVyYWdlOgogICMgICBpbWFnZTogKmltYWdlCiAgIyAgIHdoZW46CiAgIyAgICAgYnJhbmNoOiBbZGV2LCBtYXN0ZXJdCiAgIyAgICAgZXZlbnQ6IHB1c2gKICAjICAgY29tbWFuZHM6CiAgIyAgICAgLSBleHBvcnQgQkFTRT0vdmFyL3d3dy9jb3ZlcmFnZS8ke0NJX1JFUE8jIyovfQogICMgICAgIC0gc3NoIGNvcmVAbW8tNDI0OTU5MWI1Lm1vLnNhcC5jb3JwIG1rZGlyIC1wICIke0JBU0V9LyR7Q0lfQlVJTERfTlVNQkVSfSIgIiR7QkFTRX0vbGF0ZXN0IgogICMgICAgIC0gcnN5bmMgLWFxU0QgLS1pZ25vcmUtZXJyb3JzIC0tZm9yY2UgLS1kZWxldGUgdGFyZ2V0L3NjYWxhLTIuMTAvc2NvdmVyYWdlLXJlcG9ydC8gY29yZUBtby00MjQ5NTkxYjUubW8uc2FwLmNvcnA6IiR7QkFTRX0vJHtDSV9CVUlMRF9OVU1CRVJ9IgogICMgICAgIC0gc3NoIGNvcmVAbW8tNDI0OTU5MWI1Lm1vLnNhcC5jb3JwICJyc3luYyAtYXFTRCAtLWlnbm9yZS1lcnJvcnMgLS1mb3JjZSAtLWRlbGV0ZSAke0JBU0V9L1xgbHMgJEJBU0UgfCBzb3J0IC1ybiB8IGhlYWQgLW4gMVxgLyAke0JBU0V9L2xhdGVzdCIKICAjIHB1Ymxpc2hfdGVzdDoKICAjICAgaW1hZ2U6ICppbWFnZQogICMgICB3aGVuOgogICMgICAgIGJyYW5jaDogW2RldiwgbWFzdGVyXQogICMgICAgIGV2ZW50OiBwdXNoCiAgIyAgIGNvbW1hbmRzOgogICMgICAgIC0gZXhwb3J0IEJBU0U9L3Zhci93d3cvdGVzdC1yZXBvcnRzLyR7Q0lfUkVQTyMjKi99CiAgIyAgICAgLSBzc2ggY29yZUBtby00MjQ5NTkxYjUubW8uc2FwLmNvcnAgbWtkaXIgLXAgIiR7QkFTRX0vJHtDSV9CVUlMRF9OVU1CRVJ9IiAiJHtCQVNFfS9sYXRlc3QiCiAgIyAgICAgLSByc3luYyAtYXFTRCAtLWlnbm9yZS1lcnJvcnMgLS1mb3JjZSAtLWRlbGV0ZSB0YXJnZXQvdGVzdC1yZXBvcnRzLyBjb3JlQG1vLTQyNDk1OTFiNS5tby5zYXAuY29ycDoiJHtCQVNFfS8ke0NJX0JVSUxEX05VTUJFUn0iCiAgIyAgICAgLSBzc2ggY29yZUBtby00MjQ5NTkxYjUubW8uc2FwLmNvcnAgInJzeW5jIC1hcVNEIC0taWdub3JlLWVycm9ycyAtLWZvcmNlIC0tZGVsZXRlICR7QkFTRX0vXGBscyAkQkFTRSB8IHNvcnQgLXJuIHwgaGVhZCAtbiAxXGAvICR7QkFTRX0vbGF0ZXN0IgogICMgcHVibGlzaF9kb2N1bWVudGF0aW9uOgogICMgICBpbWFnZTogKmltYWdlCiAgIyAgIGVudmlyb25tZW50OgogICMgICAgIC0gSVZZMj0uaXZ5MgogICMgICB2b2x1bWVzOgogICMgICAgIC0gL3Zhci93d3cvOi92YXIvd3d3LwogICMgICBjb21tYW5kczoKICAjICAgICAtIGV4cG9ydCBCQVNFPS92YXIvd3d3L2RvY3VtZW50YXRpb24vJHtDSV9SRVBPIyMqL30KICAjICAgICAtIGV4cG9ydCBKUz0ke0JBU0V9L2pzIEpWTT0ke0JBU0V9L2p2bQogICMgICAgIC0gbWtkaXIgLXAgIiR7SlN9LyR7Q0lfQlVJTERfTlVNQkVSfSIgIiR7SlZNfS8ke0NJX0JVSUxEX05VTUJFUn0iICIke0JBU0V9L2p2bS1sYXRlc3QiICIke0JBU0V9L2p2bS1sYXRlc3QiCiAgIyAgICAgLSBjcCAtYXIgY29yZS9qcy90YXJnZXQvc2NhbGEtMi4xMS9hcGkvICIke0pTfS8ke0NJX0JVSUxEX05VTUJFUn0iCiAgIyAgICAgLSBjcCAtYXIgY29yZS9qdm0vdGFyZ2V0L3NjYWxhLTIuMTEvYXBpLyAiJHtKVk19LyR7Q0lfQlVJTERfTlVNQkVSfSIKICAjICAgICAtIHJzeW5jIC1hcVNEIC0taWdub3JlLWVycm9ycyAtLWZvcmNlIC0tZGVsZXRlICIke0pWTX0vYGxzICRKVk0gfCBzb3J0IC1ybiB8IGhlYWQgLW4gMWAvYXBpLyIgIiR7QkFTRX0vanZtLWxhdGVzdCIKICAjICAgICAtIHJzeW5jIC1hcVNEIC0taWdub3JlLWVycm9ycyAtLWZvcmNlIC0tZGVsZXRlICIke0pTfS9gbHMgJEpTIHwgc29ydCAtcm4gfCBoZWFkIC1uIDFgL2FwaS8iICIke0JBU0V9L2pzLWxhdGVzdCIKICAjICAgIyBUT0RPOiB3aGVuIHRvIGxpbmsgbGF0ZXN0PwogICMgICAjIHdoZW46CiAgIyAgICMgICBldmVudDogdGFnCiAgIyAgICMgICBicmFuY2g6IG1hc3RlcgogICMgcHVibGlzaF9jaGVja3N0eWxlOgogICMgICBpbWFnZTogKmltYWdlCiAgIyAgIGVudmlyb25tZW50OgogICMgICAgIC0gSVZZMj0uaXZ5MgogICMgICB2b2x1bWVzOgogICMgICAgIC0gL3Zhci93d3cvOi92YXIvd3d3LwogICMgICBjb21tYW5kczoKICAjICAgICAtIGV4cG9ydCBCQVNFPS92YXIvd3d3L2NoZWNrc3R5bGUvJHtDSV9SRVBPIyMqL30KICAjICAgICAjIFRPRE86IGFnZ3JlZ2F0ZSBpbnRvIG9uZSByZXBvcnQKICAjICAgICAtIHwKICAjICAgICAgIGZvciBDSEVDSyBpbiBgZmluZCAuIC1uYW1lIHNjYWxhc3R5bGUtcmVzdWx0LnhtbGA7CiAgIyAgICAgICBkbwogICMgICAgICAgICBUQVJHRVQ9IiR7QkFTRX0vJHtDSV9CVUlMRF9OVU1CRVJ9L2BlY2hvICR7Q0hFQ0t9IHwgc2VkIC1lICdzL14uXC8vLycgLWUgJ3MvXC90YXJnZXQvLycgLWUgJ3MvLnhtbCQvLycgLWUgJ3MvXC8vLS9nJ2AiCiAgIyAgICAgICAgIG1rZGlyIC1wIGBkaXJuYW1lICIke1RBUkdFVH0iYAogICMgICAgICAgICB4c2x0cHJvYyAvcm9vdC9jb250cmlidXRpb24veHNsL2NoZWNrc3R5bGUtbm9mcmFtZXMueHNsICIke0NIRUNLfSIgPiAiJHtUQVJHRVR9Lmh0bWwiCiAgIyAgICAgICBkb25lCiAgIyAgICAgLSByc3luYyAtYXFTRCAtLWlnbm9yZS1lcnJvcnMgLS1mb3JjZSAtLWRlbGV0ZSAiJEJBU0UvYGxzICRCQVNFIHwgc29ydCAtcm4gfCBoZWFkIC1uIDFgLyIgIiRCQVNFL2xhdGVzdCIKICAjICAgIyBUT0RPOiB3aGVuIHRvIGxpbmsgbGF0ZXN0PwogICMgICAjIHdoZW46CiAgIyAgICMgICBldmVudDogdGFnCiAgIyAgICMgICBicmFuY2g6IG1hc3RlcgogIGNhY2hlLXJlYnVpbGQ6CiAgICBpbWFnZTogcGx1Z2lucy9zZnRwLWNhY2hlCiAgICByZWJ1aWxkOiB0cnVlCiAgc2xhY2s6CiAgICBpbWFnZTogcGx1Z2lucy9zbGFjawogICAgd2hlbjoKICAgICAgY2hhbmdlOiB0cnVlCiAgIyBlbWFpbDoKICAjICAgZnJvbTogdGVjaG9sb2d5b2ZmaWNlX2NpQHNhcC5jb20KICAjICAgaG9zdDogbWFpbC5zYXAuY29ycAogICMgICBwb3J0OiAyNQogICMgICBza2lwX3ZlcmlmeTogdHJ1ZQogICMgICB3aGVuOgogICMgICAgIGNoYW5nZTogdHJ1ZQo.dGd6kfVqtWH4QbDluKjYxMahGD4y4J4tpoU9LGv3Wq4