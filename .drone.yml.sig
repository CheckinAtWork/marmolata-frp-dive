eyJhbGciOiJIUzI1NiJ9.aW1hZ2U6ICZpbWFnZSBtYXJtb2xhdGEtcmVnaXN0cnkubW8uc2FwLmNvcnAvbWFybW9sYXRhL2J1aWxkLnNjYWxhXzIuMTEub3Blbmpkazg6bGF0ZXN0CgpwaXBlbGluZToKICBjbG9uZToKICAgIGltYWdlOiBwbHVnaW5zL2dpdAogICAgc2tpcF92ZXJpZnk6IHRydWUKICAgIHRhZ3M6IHRydWUKICBjYWNoZS1yZXN0b3JlOgogICAgaW1hZ2U6IHBsdWdpbnMvc2Z0cC1jYWNoZQogICAgcmVzdG9yZTogdHJ1ZQogIGJ1aWxkOgogICAgaW1hZ2U6ICppbWFnZQogICAgZW52aXJvbm1lbnQ6CiAgICAgIC0gSVZZMj0uaXZ5MgogICAgY29tbWFuZHM6CiAgICAgIC0gc2J0IC1Ec2J0Lml2eS5ob21lPSRJVlkyIHNjYWxhc3R5bGUgY29tcGlsZSBkb2MKICAgICAgLSBzYnQgLURzYnQuaXZ5LmhvbWU9JElWWTIgY292ZXJhZ2Ugc2NhbGFyeEpWTS90ZXN0IHNjYWxhcnhKVk0vY292ZXJhZ2VSZXBvcnQKICAgICAgLSBzYnQgLURzYnQuaXZ5LmhvbWU9JElWWTIgY292ZXJhZ2Ugc2VsZnJ4SlZNL3Rlc3Qgc2VsZnJ4SlZNL2NvdmVyYWdlUmVwb3J0CiAgICAgIC0gc2J0IC1Ec2J0Lml2eS5ob21lPSRJVlkyIG1ldGFyeEpWTS90ZXN0OmNvbXBpbGUKICAgICAgLSBzYnQgLURzYnQuaXZ5LmhvbWU9JElWWTIgbWV0YXJ4SlMvdGVzdDpjb21waWxlCiAgICAgIC0gc2J0IC1Ec2J0Lml2eS5ob21lPSRJVlkyIGNvdmVyYWdlIG1ldGFyeEpWTS90ZXN0IG1ldGFyeEpWTS9jb3ZlcmFnZVJlcG9ydCB8fCB0cnVlCiAgICAgIC0gc2J0IC1Ec2J0Lml2eS5ob21lPSRJVlkyIGNvdmVyYWdlUmVwb3J0CiAgICAgIC0gc2J0IC1Ec2J0Lml2eS5ob21lPSRJVlkyIGNvdmVyYWdlQWdncmVnYXRlCiAgICAgIC0gc2J0IC1Ec2J0Lml2eS5ob21lPSRJVlkyIHNjYWxhcnhKUy90ZXN0IHNlbGZyeEpTL3Rlc3QKICBjbG9jOgogICAgaW1hZ2U6IG1hcm1vbGF0YS1yZWdpc3RyeS5tby5zYXAuY29ycC9tYXJtb2xhdGEvZHJvbmUtcGx1Z2luLmNsb2MKICAjIHB1Ymxpc2hfY292ZXJhZ2U6CiAgIyAgIGltYWdlOiAqaW1hZ2UKICAjICAgd2hlbjoKICAjICAgICBicmFuY2g6IFtkZXYsIG1hc3Rlcl0KICAjICAgICBldmVudDogcHVzaAogICMgICBjb21tYW5kczoKICAjICAgICAtIGV4cG9ydCBCQVNFPS92YXIvd3d3L2NvdmVyYWdlLyR7Q0lfUkVQTyMjKi99CiAgIyAgICAgLSBzc2ggY29yZUBtby00MjQ5NTkxYjUubW8uc2FwLmNvcnAgbWtkaXIgLXAgIiR7QkFTRX0vJHtDSV9CVUlMRF9OVU1CRVJ9IiAiJHtCQVNFfS9sYXRlc3QiCiAgIyAgICAgLSByc3luYyAtYXFTRCAtLWlnbm9yZS1lcnJvcnMgLS1mb3JjZSAtLWRlbGV0ZSB0YXJnZXQvc2NhbGEtMi4xMC9zY292ZXJhZ2UtcmVwb3J0LyBjb3JlQG1vLTQyNDk1OTFiNS5tby5zYXAuY29ycDoiJHtCQVNFfS8ke0NJX0JVSUxEX05VTUJFUn0iCiAgIyAgICAgLSBzc2ggY29yZUBtby00MjQ5NTkxYjUubW8uc2FwLmNvcnAgInJzeW5jIC1hcVNEIC0taWdub3JlLWVycm9ycyAtLWZvcmNlIC0tZGVsZXRlICR7QkFTRX0vXGBscyAkQkFTRSB8IHNvcnQgLXJuIHwgaGVhZCAtbiAxXGAvICR7QkFTRX0vbGF0ZXN0IgogICMgcHVibGlzaF90ZXN0OgogICMgICBpbWFnZTogKmltYWdlCiAgIyAgIHdoZW46CiAgIyAgICAgYnJhbmNoOiBbZGV2LCBtYXN0ZXJdCiAgIyAgICAgZXZlbnQ6IHB1c2gKICAjICAgY29tbWFuZHM6CiAgIyAgICAgLSBleHBvcnQgQkFTRT0vdmFyL3d3dy90ZXN0LXJlcG9ydHMvJHtDSV9SRVBPIyMqL30KICAjICAgICAtIHNzaCBjb3JlQG1vLTQyNDk1OTFiNS5tby5zYXAuY29ycCBta2RpciAtcCAiJHtCQVNFfS8ke0NJX0JVSUxEX05VTUJFUn0iICIke0JBU0V9L2xhdGVzdCIKICAjICAgICAtIHJzeW5jIC1hcVNEIC0taWdub3JlLWVycm9ycyAtLWZvcmNlIC0tZGVsZXRlIHRhcmdldC90ZXN0LXJlcG9ydHMvIGNvcmVAbW8tNDI0OTU5MWI1Lm1vLnNhcC5jb3JwOiIke0JBU0V9LyR7Q0lfQlVJTERfTlVNQkVSfSIKICAjICAgICAtIHNzaCBjb3JlQG1vLTQyNDk1OTFiNS5tby5zYXAuY29ycCAicnN5bmMgLWFxU0QgLS1pZ25vcmUtZXJyb3JzIC0tZm9yY2UgLS1kZWxldGUgJHtCQVNFfS9cYGxzICRCQVNFIHwgc29ydCAtcm4gfCBoZWFkIC1uIDFcYC8gJHtCQVNFfS9sYXRlc3QiCiAgIyBwdWJsaXNoX2RvY3VtZW50YXRpb246CiAgIyAgIGltYWdlOiAqaW1hZ2UKICAjICAgZW52aXJvbm1lbnQ6CiAgIyAgICAgLSBJVlkyPS5pdnkyCiAgIyAgIHZvbHVtZXM6CiAgIyAgICAgLSAvdmFyL3d3dy86L3Zhci93d3cvCiAgIyAgIGNvbW1hbmRzOgogICMgICAgIC0gZXhwb3J0IEJBU0U9L3Zhci93d3cvZG9jdW1lbnRhdGlvbi8ke0NJX1JFUE8jIyovfQogICMgICAgIC0gZXhwb3J0IEpTPSR7QkFTRX0vanMgSlZNPSR7QkFTRX0vanZtCiAgIyAgICAgLSBta2RpciAtcCAiJHtKU30vJHtDSV9CVUlMRF9OVU1CRVJ9IiAiJHtKVk19LyR7Q0lfQlVJTERfTlVNQkVSfSIgIiR7QkFTRX0vanZtLWxhdGVzdCIgIiR7QkFTRX0vanZtLWxhdGVzdCIKICAjICAgICAtIGNwIC1hciBjb3JlL2pzL3RhcmdldC9zY2FsYS0yLjExL2FwaS8gIiR7SlN9LyR7Q0lfQlVJTERfTlVNQkVSfSIKICAjICAgICAtIGNwIC1hciBjb3JlL2p2bS90YXJnZXQvc2NhbGEtMi4xMS9hcGkvICIke0pWTX0vJHtDSV9CVUlMRF9OVU1CRVJ9IgogICMgICAgIC0gcnN5bmMgLWFxU0QgLS1pZ25vcmUtZXJyb3JzIC0tZm9yY2UgLS1kZWxldGUgIiR7SlZNfS9gbHMgJEpWTSB8IHNvcnQgLXJuIHwgaGVhZCAtbiAxYC9hcGkvIiAiJHtCQVNFfS9qdm0tbGF0ZXN0IgogICMgICAgIC0gcnN5bmMgLWFxU0QgLS1pZ25vcmUtZXJyb3JzIC0tZm9yY2UgLS1kZWxldGUgIiR7SlN9L2BscyAkSlMgfCBzb3J0IC1ybiB8IGhlYWQgLW4gMWAvYXBpLyIgIiR7QkFTRX0vanMtbGF0ZXN0IgogICMgICAjIFRPRE86IHdoZW4gdG8gbGluayBsYXRlc3Q_CiAgIyAgICMgd2hlbjoKICAjICAgIyAgIGV2ZW50OiB0YWcKICAjICAgIyAgIGJyYW5jaDogbWFzdGVyCiAgIyBwdWJsaXNoX2NoZWNrc3R5bGU6CiAgIyAgIGltYWdlOiAqaW1hZ2UKICAjICAgZW52aXJvbm1lbnQ6CiAgIyAgICAgLSBJVlkyPS5pdnkyCiAgIyAgIHZvbHVtZXM6CiAgIyAgICAgLSAvdmFyL3d3dy86L3Zhci93d3cvCiAgIyAgIGNvbW1hbmRzOgogICMgICAgIC0gZXhwb3J0IEJBU0U9L3Zhci93d3cvY2hlY2tzdHlsZS8ke0NJX1JFUE8jIyovfQogICMgICAgICMgVE9ETzogYWdncmVnYXRlIGludG8gb25lIHJlcG9ydAogICMgICAgIC0gfAogICMgICAgICAgZm9yIENIRUNLIGluIGBmaW5kIC4gLW5hbWUgc2NhbGFzdHlsZS1yZXN1bHQueG1sYDsKICAjICAgICAgIGRvCiAgIyAgICAgICAgIFRBUkdFVD0iJHtCQVNFfS8ke0NJX0JVSUxEX05VTUJFUn0vYGVjaG8gJHtDSEVDS30gfCBzZWQgLWUgJ3MvXi5cLy8vJyAtZSAncy9cL3RhcmdldC8vJyAtZSAncy8ueG1sJC8vJyAtZSAncy9cLy8tL2cnYCIKICAjICAgICAgICAgbWtkaXIgLXAgYGRpcm5hbWUgIiR7VEFSR0VUfSJgCiAgIyAgICAgICAgIHhzbHRwcm9jIC9yb290L2NvbnRyaWJ1dGlvbi94c2wvY2hlY2tzdHlsZS1ub2ZyYW1lcy54c2wgIiR7Q0hFQ0t9IiA-ICIke1RBUkdFVH0uaHRtbCIKICAjICAgICAgIGRvbmUKICAjICAgICAtIHJzeW5jIC1hcVNEIC0taWdub3JlLWVycm9ycyAtLWZvcmNlIC0tZGVsZXRlICIkQkFTRS9gbHMgJEJBU0UgfCBzb3J0IC1ybiB8IGhlYWQgLW4gMWAvIiAiJEJBU0UvbGF0ZXN0IgogICMgICAjIFRPRE86IHdoZW4gdG8gbGluayBsYXRlc3Q_CiAgIyAgICMgd2hlbjoKICAjICAgIyAgIGV2ZW50OiB0YWcKICAjICAgIyAgIGJyYW5jaDogbWFzdGVyCiAgY2FjaGUtcmVidWlsZDoKICAgIGltYWdlOiBwbHVnaW5zL3NmdHAtY2FjaGUKICAgIHJlYnVpbGQ6IHRydWUKICBzbGFjazoKICAgIGltYWdlOiBwbHVnaW5zL3NsYWNrCiAgICB3aGVuOgogICAgICBjaGFuZ2U6IHRydWUKICAjIGVtYWlsOgogICMgICBmcm9tOiB0ZWNob2xvZ3lvZmZpY2VfY2lAc2FwLmNvbQogICMgICBob3N0OiBtYWlsLnNhcC5jb3JwCiAgIyAgIHBvcnQ6IDI1CiAgIyAgIHNraXBfdmVyaWZ5OiB0cnVlCiAgIyAgIHdoZW46CiAgIyAgICAgY2hhbmdlOiB0cnVlCg.B0GG5agkc6zBFF1GAE1-avYTDVAXm73gvtJ_CmbzAio